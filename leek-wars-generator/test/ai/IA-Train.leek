// Fichier contenant le tableau de renforcement. 
// include("Tab")
global lossLife = getLife(); 
global lastIndexMP = 0; 

// Getters 
var enemy = getNearestEnemy();
var entity = getEntity(); 
var enemyCell = getCell(enemy);
var entityCell = getCell(entity); 

var enemyLife = getLife(enemy); 

// Utiliser debug(""); pour connaitre les actions utilisé. 
var index = getPathLength(entityCell, enemyCell) * 16; 
// Selectionner l'action en fonction du max... 
var indexTP = index + randInt(0, 7);
var indexMP = index + randInt(8, 15);

// Tour Point 
if(indexTP%16 == 0){ // Tirer un coup avec le pistol
	if(getWeapon() == null or getWeapon() != WEAPON_PISTOL)
		setWeapon(WEAPON_PISTOL);
	
	useWeapon(enemy);
}
else if(indexTP%16 == 1){ // Tirer un coup avec le Machine Gun
	if(getWeapon() == null or getWeapon() != WEAPON_MACHINE_GUN)
		setWeapon(WEAPON_MACHINE_GUN);
	
	useWeapon(enemy);
}
else if(indexTP%16 == 2){ // Tirer autant que posible avec le pistol
	if(getWeapon() == null or getWeapon() != WEAPON_PISTOL)
		setWeapon(WEAPON_PISTOL);
	
	while(useWeapon(enemy) == USE_SUCCESS){}
}
else if(indexTP%16 == 3){ // Tirer autant que possible avec le Machine Gun
	if(getWeapon() == null or getWeapon() != WEAPON_MACHINE_GUN)
		setWeapon(WEAPON_MACHINE_GUN);
	
	while(useWeapon(enemy) == USE_SUCCESS){}
}
else if(indexTP%16 == 4){ // Utiliser la puce CHIP_BANDAGE
	useChip(CHIP_BANDAGE, entity); 
}
else if(indexTP%16 == 5){ // Utiliser la puce CHIP_SHOCK
	useChip(CHIP_SHOCK, enemy);
}
else if(indexTP%16 == 6){ // Utiliser la puce CHIP_PEBBLE
	useChip(CHIP_PEBBLE, enemy);
}
else if(indexTP%16 == 7){ // Utiliser la puce CHIP_ICE
	useChip(CHIP_ICE, enemy);
}
else{
	//PB lol.. 
}

// Move Point 
if(indexMP%16 == 8){ // Avancer de 1 vers l'enemi
	moveToward(enemy, 1);
}
else if(indexMP%16 == 9){ // Avancer de 2 vers l'enemi
	moveToward(enemy, 2);
}
else if(indexMP%16 == 10){ // Avancer de 3 vers l'enemi
	moveToward(enemy, 3);
}
else if(indexMP%16 == 11){ // Avancer autant que possible vers l'enemi
	moveToward(enemy);
}
else if(indexMP%16 == 12){ // Séloigner de 1 de l'enemi
	moveAwayFrom(enemy, 1); 
}
else if(indexMP%16 == 13){ // Séloigner de 2 de l'enemi
	moveAwayFrom(enemy, 2); 
}
else if(indexMP%16 == 14){ // Séloigner de 3 de l'enemi
	moveAwayFrom(enemy, 3); 
}
else if(indexMP%16 == 15){ // Séloigner autant que possible de l'enemi
	moveAwayFrom(enemy); 
}
else {
	// Problème lol... 
}

var lossLifeVar = lossLife; 
var usefullTP = enemyLife - getLife(enemy); 
var usefullMP = lossLifeVar - getLife(); 

lossLife - getLife(); 

vectorisation();


debug(indexTP + "/" + usefullTP + "/" + lastIndexMP + "/" + usefullMP); 

lastIndexMP = indexMP; 


function vectorisation(){
	var enemy = getNearestEnemy();
	var entity = getEntity();
	var enemyCell = getCell(enemy);
	var entityCell = getCell(entity); 

	var vecteur = "";

	//Différence de vie entre les 2 joueurs
	(getLife(entity) > getLife(enemy)) ? vecteur+="1" : vecteur+="0";
	//Ligne de vue entre les deux joueurs
	(lineOfSight(getCell(),getCell(enemy))) ? vecteur+="1" : vecteur+="0";
	//Utilisation de l'arme sur l'adversaire
	(canUseWeapon(enemy)) ? vecteur+="1" : vecteur+="0";
	
	//Disponibilité des chips
	var tabChips = getChips();
	for(var i=0; i<count(tabChips); i++){
		(getCooldown(tabChips[i]) == 0) ? vecteur+="1" : vecteur+="0";
	}

	debug(vecteur);
	return vecteur;
}